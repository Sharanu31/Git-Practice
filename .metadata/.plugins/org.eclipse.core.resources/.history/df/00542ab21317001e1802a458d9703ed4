package com.example.rev.serviceImpTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;

import com.example.rev.entity.Department;
import com.example.rev.service.DepartmentService;

@SpringBootTest
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class DepartmentServiceImpTest {

	@Autowired
	private DepartmentService departmentService;

	@Test
	@Disabled
	void creatingDepartment() throws Exception {
		Department inputDepartment = Department.builder().deptName("Tenjin Adapter").build();

		Department outputDepartment = departmentService.saveDepartment(inputDepartment);

		assertEquals("Tenjin Adapter", outputDepartment.getDeptName());
	}

	@Test
	@Disabled
	void creatingDepartmentAndtoCheckWetherItWillthrowExceptionWhenSameIsPassed() throws Exception {
		Department inputDepartment = Department.builder().deptName("Tenjin Adapter").build();

		Department outputDepartment = departmentService.saveDepartment(inputDepartment);

		assertThrows(IllegalArgumentException.class, () -> departmentService.saveDepartment(inputDepartment));
	}

	@Test
	@Disabled
	void toCheckWetherItWIllThorwIllegalArgumentExceptioWhenEmptyDeprtnameIsPAssed() throws Exception {
		Department inputDepartment = Department.builder().deptName("").build();

		assertThrows(IllegalArgumentException.class, () -> departmentService.saveDepartment(inputDepartment));

	}

	@Test
	@Disabled
	void fetchingTocheckWetherItWIllFetchByName() throws Exception {
		Department inputDepartment = Department.builder().deptName("Tenjin Adapter").build();
		departmentService.saveDepartment(inputDepartment);

		Department fectDept = departmentService.fectchByDepatmentName(inputDepartment.getDeptName());

		assertEquals("Tenjin Adapter", fectDept.getDeptName());

	}
	
	@Test
	void throwIllegalArgumtnExceptionWhenNullvalueIsPassed() throws Exception {
		Department inputDepartment = Department.builder().deptName("Tenjin Adapter").build();
		departmentService.saveDepartment(inputDepartment);


		assertThrows(IllegalArgumentException.class, () -> departmentService.fectchByDepatmentName(null));


	}

}
